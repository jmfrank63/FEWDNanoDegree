{"filter":false,"title":"function1.js","tooltip":"/project2/project/function1.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":38,"column":45},"action":"insert","lines":["function getRelationship(x, y) {","    // Your code goes here!","    // \"Can't compare relationships because [this value] and [that value] [is]/[are] not [a] number[s].\"","    var message;","    ","    if (isNaN(x) || isNaN(y)) {","        if (isNaN(x) &&  isNaN(y)) {","                message = \"Can't compare relationships because \" + x + \" and \" + y + \" are not numbers\";","            }","        else if (isNaN(x)) {","            message = \"Can't compare relationships because \" + x + \" is not a number\";","        }","        else {","            message = \"Can't compare relationships because \" + y + \" is not a number\";","        }","    }","    else if (x == y) {","            message = \"=\";","        }","    else if (x < y) {","        message = \"<\";","    }","    else {","        message = \">\";","    }","    return message;","};","","// Try logging these functions to test your code!","console.log(getRelationship(4,1));","console.log(getRelationship(1,4));","console.log(getRelationship(1,1));","console.log(getRelationship(2.5,2.5));","console.log(getRelationship(\"that\",2));","console.log(getRelationship(\"this\",\"something else\"));","console.log(getRelationship(3));","console.log(getRelationship(\"hi\"));","console.log(getRelationship(NaN));","console.log(getRelationship(NaN, undefined));"]}]}]]},"ace":{"folds":[],"scrolltop":150,"scrollleft":0,"selection":{"start":{"row":25,"column":19},"end":{"row":25,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1417821738172,"hash":"10e201737e36a01ab62ecb3d0e1940e5f281f05f"}